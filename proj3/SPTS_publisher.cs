using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;

/* SPTS_publisher.cs

   A publication of data of type Accident

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C# -example <arch> SPTS.idl

   Example publication of type Accident automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription with the command
       objs\<arch>\SPTS_subscriber <domain_id> <sample_count>
                
   (3) Start the publication with the command
       objs\<arch>\SPTS_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 

   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.


   Example:

       To run the example application on domain <domain_id>:

       bin\<Debug|Release>\SPTS_publisher <domain_id> <sample_count>
       bin\<Debug|Release>\SPTS_subscriber <domain_id> <sample_count>

       
modification history
------------ -------       
*/

public class Route
{
    public List<Bus> busses { get; set; }
    public int numStops { get; set; }
    public int timeBetweenStops { get; set; }
    public string name { get; set; }
    public class Bus
    {
        public string id { get; set; }
        public int stop { get; set; }
    };
    public Route()
    {
        busses = new List<Bus>();
    }

};


public class AccidentPublisher
{
    public static void Main(string[] args)
    {
        // --- Get domain ID --- //
        int domain_id = 0;
        if (args.Length >= 1)
        {
            domain_id = Int32.Parse(args[0]);
        }

        // --- Get max loop count; 0 means infinite loop  --- //
        int sample_count = 0;
        if (args.Length >= 2)
        {
            sample_count = Int32.Parse(args[1]);
        }

        /* Uncomment this to turn on additional logging
        NDDS.ConfigLogger.get_instance().set_verbosity_by_category(
            NDDS.LogCategory.NDDS_CONFIG_LOG_CATEGORY_API, 
            NDDS.LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */


        List<Route> routes = new List<Route>();
        int numRoutes = 0, numVehicles = 0, numInitialBackupVehicles = 0, currentRoute = 0, currentVehicle = 0;
        List<string> routeNames = new List<string>();
        StreamReader sr = new StreamReader("pub.properties");
        Regex routeRegEx = new Regex("^[A-z]*[0-9]$"); // route name regex
        string line;
        while ((line = sr.ReadLine()) != null)
        {
            if (string.IsNullOrEmpty(line))
                continue;
            if (line[0] != '#')
            {
                string property = line.Split('=')[0];
                string value = line.Split('=')[1];
                if (property.Equals("numRoutes"))
                {
                    numRoutes = Convert.ToInt32(value);
                    continue;
                }
                if (property.Equals("numVehicles"))
                {
                    numVehicles = Convert.ToInt32(value);
                    continue;
                }
                if (property.Equals("numInitialBackupVehicles"))
                {
                    numInitialBackupVehicles = Convert.ToInt32(value);
                    continue;
                }
                if (routeRegEx.Match(property).Success)
                {//route names
                    routes.Add(new Route() { name = value });
                    continue;
                }
                if (property.Contains("NumStops"))
                {
                    routes[currentRoute].numStops = Convert.ToInt32(value);
                    continue;
                }
                if (property.Contains("TimeBetweenStops"))
                {
                    routes[currentRoute].timeBetweenStops = Convert.ToInt32(value);
                    continue;
                }
                // now we name the busses
                if (property.Contains("Vehicle") && currentVehicle < numInitialBackupVehicles + numVehicles)
                {
                    routes[currentRoute].busses.Add(new Route.Bus() { id = value, stop = Convert.ToInt32(value.Last())});
                    currentVehicle++;
                    if (currentVehicle == numVehicles + numInitialBackupVehicles)
                    {
                        currentRoute++;
                        currentVehicle = 0;
                    }
                    continue;
                }
            }
        }// end while

        foreach (Route r in routes)
        {
            var passedRoute = r;
            foreach (Route.Bus b in r.busses)
            {
                var passedBus = b;
                ThreadStart t = new ThreadStart(delegate()
                    {
                        try
                        {
                            AccidentPublisher.publish(domain_id, sample_count, passedRoute, passedBus);
                        }
                        catch (DDS.Exception ex)
                        {
                            Console.WriteLine(ex.GetBaseException().ToString());
                        }
                    });
                Thread th = new Thread(t);
                th.IsBackground = true;
                th.Start();
            }
        }
        Console.ReadKey();

        /*
        // --- Run --- //
        try
        {
            AccidentPublisher.publish(
                domain_id, sample_count, null, null);
        }
        catch (DDS.Exception)
        {
            Console.WriteLine("error in publisher");
        }
         * */
    }

    static void publish(int domain_id, int sample_count, Route routeIn, Route.Bus busIn)
    {
        Random random = new Random();
        int randomNumber = random.Next(0, 100);

        // --- Create participant --- //

        /* To customize participant QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DomainParticipant participant =
            DDS.DomainParticipantFactory.get_instance().create_participant(
                domain_id,
                DDS.DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */,
                DDS.StatusMask.STATUS_MASK_NONE);
        if (participant == null)
        {
            shutdown(participant);
            throw new ApplicationException("create_participant error");
        }

        // --- Create publisher --- //

        /* To customize publisher QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Publisher publisher = participant.create_publisher(
        DDS.DomainParticipant.PUBLISHER_QOS_DEFAULT,
        null /* listener */,
        DDS.StatusMask.STATUS_MASK_NONE);
        if (publisher == null)
        {
            shutdown(participant);
            throw new ApplicationException("create_publisher error");
        }

        // --- Create topic --- //

        /* Register type before creating topic */
        System.String atype_name = AccidentTypeSupport.get_type_name();
        System.String ptype_name = PositionTypeSupport.get_type_name();
        try
        {
            AccidentTypeSupport.register_type(
                participant, atype_name);
            PositionTypeSupport.register_type(
                participant, ptype_name);
        }
        catch (DDS.Exception e)
        {
            Console.WriteLine("register_type error {0}", e);
            shutdown(participant);
            throw e;
        }

        /* To customize topic QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.Topic atopic = participant.create_topic(
            "P3464_BHANDERSON: PT/ALR/ACC",
            atype_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        DDS.Topic ptopic = participant.create_topic(
            "P3464_BHANDERSON: PT/POS",
            ptype_name,
            DDS.DomainParticipant.TOPIC_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);

        if (atopic == null || ptopic == null)
        {
            shutdown(participant);
            throw new ApplicationException("create_topic error");
        }


        // --- Create writer --- //

        /* To customize data writer QoS, use 
           the configuration file USER_QOS_PROFILES.xml */
        DDS.DataWriter awriter = publisher.create_datawriter(
            atopic,
            DDS.Publisher.DATAWRITER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);
        DDS.DataWriter pwriter = publisher.create_datawriter(
            ptopic,
            DDS.Publisher.DATAWRITER_QOS_DEFAULT,
            null /* listener */,
            DDS.StatusMask.STATUS_MASK_NONE);

        if (awriter == null || pwriter == null)
        {
            shutdown(participant);
            throw new ApplicationException("create_datawriter error");
        }
        AccidentDataWriter Accident_writer =
            (AccidentDataWriter)awriter;
        PositionDataWriter Position_writer =
            (PositionDataWriter)pwriter;
        // --- Write --- //

        /* Create data sample for writing */
        Accident ainstance = AccidentTypeSupport.create_data();
        Position pinstance = PositionTypeSupport.create_data();
        if (ainstance == null || pinstance == null)
        {
            shutdown(participant);
            throw new ApplicationException(
                "(Accident|Position)TypeSupport.create_data error");
        }

        /* For a data type that has a key, if the same instance is going to be
           written multiple times, initialize the key here
           and register the keyed instance prior to writing */
        DDS.InstanceHandle_t instance_handle = DDS.InstanceHandle_t.HANDLE_NIL;
        /*
        instance_handle = Accident_writer.register_instance(instance);
        */



        int numPasses = 0;
        /* Main loop */
        int send_period = 4000; // milliseconds
        for (int count = 0;
             (sample_count == 0) || (count < sample_count);
             ++count)
        {
            if (count % routeIn.numStops == 0) numPasses++;
            if (numPasses > 3) break;

            Console.WriteLine("Writing Accident|Position, count {0}", count);

            /* Modify the data to be sent here */

            int traffic = random.Next(0, 100);
            if (traffic <= 25) // light 25%
            {
                pinstance.trafficConditions = "light";
                pinstance.timeBetweenStops = (int)(Math.Ceiling(routeIn.timeBetweenStops * .75));
            }
            else if (traffic <= 50) // heavy 25%
            {
                pinstance.trafficConditions = "heavy";
                pinstance.timeBetweenStops = (int)(routeIn.timeBetweenStops + Math.Ceiling(routeIn.timeBetweenStops * .25));
            }
            else // normal 50%
            {
                pinstance.trafficConditions = "normal";
                pinstance.timeBetweenStops = routeIn.timeBetweenStops;
            }

            ainstance.timestamp = DateTime.Now.ToString();
            ainstance.route = routeIn.name;
            ainstance.vehicle = busIn.id;
            ainstance.stopNumber = busIn.stop;
            
            pinstance.timestamp = DateTime.Now.ToString();
            pinstance.route = routeIn.name;
            pinstance.vehicle = busIn.id;
            pinstance.stopNumber = busIn.stop;
            pinstance.numStops = routeIn.numStops;
            pinstance.fillInRatio = random.Next(0, 100);

            int aOccurs = random.Next(0, 100);

            if (aOccurs <= 10)
            {
                try
                {
                    Accident_writer.write(ainstance, ref instance_handle);
                }
                catch (DDS.Exception e)
                {
                    Console.WriteLine("write error {0}", e);
                }
                pinstance.timeBetweenStops += 10;
            }

            send_period = pinstance.timeBetweenStops * 1000; // threads use milliseconds

            busIn.stop = (busIn.stop % routeIn.numStops) + 1;

            try
            {
                Position_writer.write(pinstance, ref instance_handle);
            }
            catch (DDS.Exception e)
            {
                Console.WriteLine("write error {0}", e);
            }

            System.Threading.Thread.Sleep(send_period);
        }

        /*
        try {
            Accident_writer.unregister_instance(
                instance, ref instance_handle);
        } catch(DDS.Exception e) {
            Console.WriteLine("unregister instance error: {0}", e);
        }
        */

        // --- Shutdown --- //

        /* Delete data sample */
        try
        {
            AccidentTypeSupport.delete_data(ainstance);
            PositionTypeSupport.delete_data(pinstance);
        }
        catch (DDS.Exception e)
        {
            Console.WriteLine(
                "(Accident|Position)TypeSupport.delete_data error: {0}", e);
        }

        /* Delete all entities */
        shutdown(participant);
    }

    static void shutdown(
        DDS.DomainParticipant participant)
    {

        /* Delete all entities */

        if (participant != null)
        {
            participant.delete_contained_entities();
            DDS.DomainParticipantFactory.get_instance().delete_participant(
                ref participant);
        }

        /* RTI Connext provides finalize_instance() method on
           domain participant factory for people who want to release memory
           used by the participant factory. Uncomment the following block of
           code for clean destruction of the singleton. */
        /*
        try {
            DDS.DomainParticipantFactory.finalize_instance();
        } catch (DDS.Exception e) {
            Console.WriteLine("finalize_instance error: {0}", e);
            throw e;
        }
        */
    }
}

